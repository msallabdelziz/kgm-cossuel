security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Utilisateur:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur
                property: login
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\UserAuthenticator
            user_checker: App\Security\UserChecker
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/main, roles: [IS_AUTHENTICATED_FULLY, ROLE_USER] }
        - { path: ^/region, roles: [ROLE_ADMIN] }
        - { path: ^/departement, roles: [ROLE_ACCUEIL, ROLE_RFO] }
        - { path: ^/localite, roles: [ROLE_ACCUEIL, ROLE_RFO] }
        - { path: ^/agence, roles: [ROLE_ADMIN] }
        - { path: ^/agent, roles: [ROLE_ADMIN] }
        - { path: ^/electricien, roles: [ROLE_ACCUEIL, ROLE_RFO] }
        - { path: ^/proprietaire, roles: [ROLE_ACCUEIL, ROLE_RFO] }
        - { path: ^/installation/soumission, roles: [ROLE_PUBLIC, ROLE_RFO] }
        - { path: ^/installation/paiement, roles: [ROLE_CAISSIER, ROLE_COMPTABLE] }
        - { path: ^/installation/validation, roles: [ROLE_RFO] }
        - { path: ^/dossier/affectation, roles: [ROLE_REFERENT] }
        - { path: ^/dossier/visite, roles: [ROLE_CONTROLEUR] }
        - { path: ^/dossier/rapport, roles: [ROLE_CONTROLEUR] }
        - { path: ^/utilisateur, roles: [ROLE_USER] }

    role_hierarchy:
            ROLE_ADMIN: ROLE_DAF, ROLE_REFERENT, ROLE_RFO, ROLE_CONTROLEUR, ROLE_ACCUEIL
            ROLE_DAF: ROLE_COMPTABLE
            ROLE_COMPTABLE: ROLE_CAISSIER
            ROLE_ACCUEIL: ROLE_PUBLIC
            ROLE_REFERENT: ROLE_USER
            ROLE_CAISSIER: ROLE_USER
            ROLE_CONTROLEUR: ROLE_USER
            ROLE_RFO: ROLE_USER
            ROLE_PUBLIC: ROLE_USER
            

            # 'ROLE_ADMIN', 'ROLE_DAF', 'ROLE_REFERENT', 'ROLE_RFO', 'ROLE_ACCUEIL', 'ROLE_COMPTABLE', 'ROLE_CAISSIER', 'ROLE_CONTROLEUR', 'ROLE_USER'

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
